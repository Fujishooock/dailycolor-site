import csv, datetime as dt, pathlib

ROOT = pathlib.Path(__file__).parent
DATA = ROOT / "data.csv"
OUT = ROOT

BASE_CSS = """
  *{box-sizing:border-box}
  body{margin:0;background:#fff;color:#111;font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto}
  a{color:inherit;text-decoration:none}
  header{padding:24px 20px;display:flex;justify-content:space-between;align-items:center;max-width:1200px;margin:0 auto}
  h1{font-size:18px;margin:0;letter-spacing:.02em}
  main{max-width:1200px;margin:0 auto;padding:0 20px 40px}
  footer{padding:24px 20px;color:#9ca3af;font-size:12px;max-width:1200px;margin:0 auto}
"""

INDEX_CSS = BASE_CSS + """
  .grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(180px,1fr));gap:16px}
  .card{border:1px solid #e5e7eb;border-radius:16px;overflow:hidden;transition:transform .08s ease;background:#fff}
  .card:hover{transform:translateY(-2px)}
  .swatch{width:100%;aspect-ratio:1/1;object-fit:cover;display:block}
  .meta{padding:12px 14px;display:flex;flex-direction:column;gap:6px}
  .hex{font-family:ui-monospace,Menlo,Consolas,monospace;font-size:14px}
  .date{font-size:12px;color:#6b7280}
"""

DETAIL_CSS = BASE_CSS + """
  header,main{max-width:760px}
  .swatch{display:block;width:100%;height:auto;border:1px solid #e5e7eb;border-radius:20px}
  .meta{margin-top:16px;display:grid;grid-template-columns:1fr 1fr;gap:12px}
  .box{border:1px solid #e5e7eb;border-radius:12px;padding:12px}
  .label{font-size:12px;color:#6b7280}
  .value{font-family:ui-monospace,Menlo,Consolas,monospace;margin-top:6px}
  .caption{margin-top:20px}
  button{padding:8px 10px;border-radius:10px;border:1px solid #e5e7eb;background:#fff;cursor:pointer}
"""

def read_rows():
    rows = []
    with DATA.open(encoding="utf-8") as f:
        r = csv.DictReader(f)
        for row in r:
            row["date_obj"] = dt.date.fromisoformat(row["date"])
            rows.append(row)
    rows.sort(key=lambda x: x["date_obj"], reverse=True)
    return rows

def render_index(rows):
    cards = []
    for row in rows:
        date = row["date"]
        hexv = row["hex"]
        img = row["image"]
        href = f"color-{date}.html"
        cards.append(f"""
        <a class="card" href="{href}">
          <img class="swatch" src="{img}" alt="{hexv}">
          <div class="meta">
            <div class="hex">{hexv}</div>
            <div class="date">{date}</div>
          </div>
        </a>
        """)
    html = f"""<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <meta name="robots" content="noindex,nofollow">
  <title>Daily Color</title>
  <style>{INDEX_CSS}</style>
</head>
<body>
  <header><h1>Daily Color</h1><nav></nav></header>
  <main>
    <div class="grid">
      {''.join(cards)}
    </div>
  </main>
  <footer>Minimal gallery generated by Python</footer>
</body>
</html>"""
    (OUT / "index.html").write_text(html, encoding="utf-8")

def render_detail(row):
    date = row["date"]
    hexv = row["hex"]
    rgb = row["rgb"]
    cap = row["caption"]
    img = row["image"]
    html = f"""<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <meta name="robots" content="noindex,nofollow">
  <title>Daily Color {date} · {hexv}</title>
  <style>{DETAIL_CSS}</style>
</head>
<body>
  <header><a href="index.html">← Back</a></header>
  <main>
    <img class="swatch" src="{img}" alt="{hexv}">
    <div class="meta">
      <div class="box">
        <div class="label">HEX</div>
        <div class="value" id="hex">{hexv}</div>
      </div>
      <div class="box">
        <div class="label">RGB</div>
        <div class="value" id="rgb">{rgb}</div>
      </div>
    </div>
    <div class="caption">
      <div class="label">Caption</div>
      <p>{cap}</p>
      <button id="copy">Copy HEX</button>
    </div>
  </main>
  <script>
    document.getElementById('copy').addEventListener('click', async ()=>{
      const hex = document.getElementById('hex').textContent.trim()
      try{{{{ await navigator.clipboard.writeText(hex) }}}}catch(e){{{{}}}}
    })
  </script>
</body>
</html>"""
    (OUT / f"color-{date}.html").write_text(html, encoding="utf-8")

def main():
    rows = read_rows()
    render_index(rows)
    for row in rows:
        render_detail(row)

if __name__ == "__main__":
    main()
